import Settings from './settings.ts';
import Endpoints from './endpoints.ts';
import { get } from './request.ts';
class PexelsApi {
    #apiVersion;
    #apiKey;
    constructor(apiKey, apiVersion = 'v1') {
        this.#apiVersion = apiVersion;
        if (!apiKey) {
            throw new Error(`Pexels API key is missing`);
        }
        this.#apiKey = apiKey;
    }
    #getBaseUrl = () => {
        return `${Settings.PEXELS_API_BASE}/${this.#apiVersion}`;
    };
    #getAuthorizationHeader = () => {
        return { 'Authorization': `${this.#apiKey} ` };
    };
    getPexelsApiVerison = () => this.#apiVersion;
    getPhotoById = async (id) => {
        const url = `${this.#getBaseUrl()}/${Endpoints.PHOTOS_URL}/${id}`;
        return await get(url, this.#getAuthorizationHeader());
    };
    searchPhotos = async (qp, page = 1, perPage = 15) => {
        if (!qp.query)
            throw new Error('Query is required field. The search query. Ocean, Tigers, Pears, etc.');
        const query = Object.keys(qp).
            map((k) => {
            if (qp[k])
                return `${k}=${qp[k]}`;
            return undefined;
        })
            .filter(Boolean)
            .join('&');
        const qs = `${query.toLowerCase()}&per_page=${perPage}&page=${page}`;
        const url = `${this.#getBaseUrl()}/${Endpoints.SEARCH_URL}?${qs}`;
        console.log(url, 'url');
        return await get(url, this.#getAuthorizationHeader());
    };
    getRandomPhotos = async (perPage = 1) => {
        const random = Math.floor(Math.random() * (1000 - 1 + 1)) + 1;
        const url = `${this.#getBaseUrl()}/${Endpoints.CURATED_URL}?page=${random}&per_page=${perPage}`;
        return await get(url, this.#getAuthorizationHeader());
    };
    getTrendingPhotos = async (page = 1, perPage = 15) => {
        const url = `${this.#getBaseUrl()}/${Endpoints.CURATED_URL}?page=${page}&per_page=${perPage}`;
        return await get(url, this.#getAuthorizationHeader());
    };
    searchVideos = async (qp, page = 1, perPage = 10) => {
        if (!qp.query)
            throw new Error('Query is required field. The search query. Ocean, Tigers, Pears, etc.');
        const query = Object.keys(qp).
            map((k) => {
            if (qp[k])
                return `${k}=${qp[k]}`;
            return undefined;
        })
            .filter(Boolean)
            .join('&');
        const qs = `${query.toLowerCase()}& per_page=${perPage}&page=${page}`;
        const url = `${this.#getBaseUrl()}/${Endpoints.VIDEO_SEARCH_URL}?${qs}`;
        return await get(url, this.#getAuthorizationHeader());
    };
    getPopularVideos = async (vp) => {
        let url = `${this.#getBaseUrl()}/${Endpoints.POPULAR_VIDEO_URL}`;
        if (vp) {
            const query = Object.keys(vp).
                map((k) => {
                if (vp[k])
                    return `${k}=${vp[k]}`;
                return undefined;
            })
                .filter(Boolean)
                .join('&');
            url += `?${query}`;
            return await get(url, this.#getAuthorizationHeader());
        }
        return await get(url, this.#getAuthorizationHeader());
    };
    getMyCollection = async (page = 1, perPage = 15) => {
        const url = `${this.#getBaseUrl()}/${Endpoints.MY_COLLECTIONS}?page=${page}&per_page=${perPage}`;
        return await get(url, this.#getAuthorizationHeader());
    };
    getCollectionsMedia = async (id, type, page = 1, perPage = 15) => {
        let url = `${this.#getBaseUrl()}/${Endpoints.MY_COLLECTIONS}/${id}?type=${type}&page=${page}&per_page=${perPage}`;
        if (type === 'all') {
            url = url.replace('type=all&', '');
        }
        return await get(url, this.#getAuthorizationHeader());
    };
    getFeaturedCollections = async (page = 1, perPage = 15) => {
        const url = `${this.#getBaseUrl()}/${Endpoints.FEATURED_COLLECTIONS}?page=${page}&per_page=${perPage}`;
        return await get(url, this.#getAuthorizationHeader());
    };
}
export default PexelsApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGV4ZWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9Vc2Vycy9zYWphbmt1bWFydmlqYXlhbi9wcm9qZWN0L3BleGVsc19hcGlfbW9kL3NyYy9wZXhlbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxRQUFRLE1BQU0sZUFBZSxDQUFDO0FBQ3JDLE9BQU8sU0FBUyxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFJbkMsTUFBTSxTQUFTO0lBQ1gsV0FBVyxDQUFTO0lBQ3BCLE9BQU8sQ0FBUztJQUVoQixZQUFZLE1BQWMsRUFBRSxhQUFxQixJQUFJO1FBQ2pELElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO1FBQzlCLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7U0FDaEQ7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUMxQixDQUFDO0lBRUQsV0FBVyxHQUFHLEdBQUcsRUFBRTtRQUNmLE9BQU8sR0FBRyxRQUFRLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUM1RCxDQUFDLENBQUE7SUFFRCx1QkFBdUIsR0FBRyxHQUFHLEVBQUU7UUFDM0IsT0FBTyxFQUFFLGVBQWUsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ25ELENBQUMsQ0FBQTtJQU1ELG1CQUFtQixHQUFHLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7SUFPckQsWUFBWSxHQUFHLEtBQUssRUFBRSxFQUFVLEVBQWtCLEVBQUU7UUFDaEQsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksU0FBUyxDQUFDLFVBQVUsSUFBSSxFQUFFLEVBQUUsQ0FBQztRQUNsRSxPQUFPLE1BQU0sR0FBRyxD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TUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksU0FBUyxDQUFDLGNBQWMsU0FBUyxJQUFJLGFBQWEsT0FBTyxFQUFFLENBQUM7UUFDakcsT0FBTyxNQUFNLEdBQUcsQ0FBYSxHQUFHLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUMsQ0FBQztJQUN0RSxDQUFDLENBQUE7SUFPRCxtQkFBbUIsR0FBRyxLQUFLLEVBQUUsRUFBVSxFQUNuQyxJQUFpQyxFQUNqQyxPQUFlLENBQUMsRUFBRSxVQUFrQixFQUFFLEVBQXdCLEVBQUU7UUFDaEUsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksU0FBUyxDQUFDLGNBQWMsSUFBSSxFQUFFLFNBQVMsSUFBSSxTQUFTLElBQUksYUFBYSxPQUFPLEVBQUUsQ0FBQztRQUNsSCxJQUFJLElBQUksS0FBSyxLQUFLLEVBQUU7WUFDaEIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsT0FBTyxNQUFNLEdBQUcsQ0FBYyxHQUFHLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUMsQ0FBQztJQUN2RSxDQUFDLENBQUE7SUFPRCxzQkFBc0IsR0FBRyxLQUFLLEVBQUUsT0FBZSxDQUFDLEVBQUUsVUFBa0IsRUFBRSxFQUF3QixFQUFFO1FBQzVGLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxvQkFBb0IsU0FBUyxJQUFJLGFBQWEsT0FBTyxFQUFFLENBQUM7UUFDdkcsT0FBTyxNQUFNLEdBQUcsQ0FBYyxHQUFHLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUMsQ0FBQztJQUN2RSxDQUFDLENBQUE7Q0FDSjtBQUVELGVBQWUsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNldHRpbmdzIGZyb20gJy4vc2V0dGluZ3MudHMnO1xuaW1wb3J0IEVuZHBvaW50cyBmcm9tICcuL2VuZHBvaW50cy50cyc7XG5pbXBvcnQgeyBnZXQgfSBmcm9tICcuL3JlcXVlc3QudHMnO1xuaW1wb3J0IHsgUGhvdG8sIFNlYXJjaFBob3RvLCBTZWFyY2hWaWRlbywgQ29sbGVjdGlvbiwgQ29sbGVjdGlvbnMgfSBmcm9tICcuL3Jlc3BvbnNlTW9kZWwudHMnO1xuaW1wb3J0IHsgU2VhcmNoUXVlcnlPcHRpb24sIFZpZGVvUGFyYW1ldGVyIH0gZnJvbSAnLi90eXBlcy50cyc7XG5cbmNsYXNzIFBleGVsc0FwaSB7XG4gICAgI2FwaVZlcnNpb246IHN0cmluZztcbiAgICAjYXBpS2V5OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihhcGlLZXk6IHN0cmluZywgYXBpVmVyc2lvbjogc3RyaW5nID0gJ3YxJykge1xuICAgICAgICB0aGlzLiNhcGlWZXJzaW9uID0gYXBpVmVyc2lvbjtcbiAgICAgICAgaWYgKCFhcGlLZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUGV4ZWxzIEFQSSBrZXkgaXMgbWlzc2luZ2ApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI2FwaUtleSA9IGFwaUtleTtcbiAgICB9XG5cbiAgICAjZ2V0QmFzZVVybCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGAke1NldHRpbmdzLlBFWEVMU19BUElfQkFTRX0vJHt0aGlzLiNhcGlWZXJzaW9ufWBcbiAgICB9XG5cbiAgICAjZ2V0QXV0aG9yaXphdGlvbkhlYWRlciA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHsgJ0F1dGhvcml6YXRpb24nOiBgJHt0aGlzLiNhcGlLZXl9IGAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCBQZXhlbHMgQVBJIHZlcmlzb25cbiAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgKi9cbiAgICBnZXRQZXhlbHNBcGlWZXJpc29uID0gKCk6IHN0cmluZyA9PiB0aGlzLiNhcGlWZXJzaW9uO1xuXG4gICAgLyoqXG4gICAgICogUmVxdWVzdCBhIHNwZWNpZmljIHBob3RvIGJ5IElEIGFuZCBpdCByZXR1cm5zIGEgcHJvbWlzZSBvZiBQaG90byBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlkXG4gICAgICogQHJldHVybnMge1Byb21pc2U8UGhvdG8+fVxuICAgICAqL1xuICAgIGdldFBob3RvQnlJZCA9IGFzeW5jIChpZDogbnVtYmVyKTogUHJvbWlzZTxQaG90bz4gPT4ge1xuICAgICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLiNnZXRCYXNlVXJsKCl9LyR7RW5kcG9pbnRzLlBIT1RPU19VUkx9LyR7aWR9YDtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGdldDxQaG90bz4odXJsLCB0aGlzLiNnZXRBdXRob3JpemF0aW9uSGVhZGVyKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlYXJjaCBwaG90b3MgaW4gUGV4ZWxzIEFQSVxuICAgICAqIEBwYXJhbSB7U2VhcmNoUXVlcnlPcHRpb259IHFwIFNlYXJjaCB0ZXJtXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2UgU3BlY2lmaWVzIHRoZSBwYWdlIGJlaW5nIHJlcXVlc3RlZCAoRGVmYXVsdHMgdG8gMSlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGVyUGFnZSBTcGVjaWZpZXMgdGhlIG51bWJlciBvZiBpdGVtcyBwZXIgcGFnZSAoRGVmYXVsdHMgdG8gMTApXG4gICAgICogQHJldHVybnMge1Byb21pc2U8U2VhcmNoUGhvdG8+fVxuICAgICAqL1xuICAgIHNlYXJjaFBob3RvcyA9IGFzeW5jIChxcDogU2VhcmNoUXVlcnlPcHRpb24sIHBhZ2U6IG51bWJlciA9IDEsIHBlclBhZ2U6IG51bWJlciA9IDE1KTogUHJvbWlzZTxTZWFyY2hQaG90bz4gPT4ge1xuICAgICAgICBpZiAoIXFwLnF1ZXJ5KSB0aHJvdyBuZXcgRXJyb3IoJ1F1ZXJ5IGlzIHJlcXVpcmVkIGZpZWxkLiBUaGUgc2VhcmNoIHF1ZXJ5LiBPY2VhbiwgVGlnZXJzLCBQZWFycywgZXRjLicpXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gT2JqZWN0LmtleXMocXApLlxuICAgICAgICAgICAgbWFwKChrKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHFwW2sgYXMga2V5b2YgU2VhcmNoUXVlcnlPcHRpb25dKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7a309JHtxcFtrIGFzIGtleW9mIFNlYXJjaFF1ZXJ5T3B0aW9uXX1gXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgICAuam9pbignJicpO1xuXG4gICAgICAgIGNvbnN0IHFzID0gYCR7cXVlcnkudG9Mb3dlckNhc2UoKX0mcGVyX3BhZ2U9JHtwZXJQYWdlfSZwYWdlPSR7cGFnZX1gO1xuICAgICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLiNnZXRCYXNlVXJsKCl9LyR7RW5kcG9pbnRzLlNFQVJDSF9VUkx9PyR7cXN9YDtcbiAgICAgICAgY29uc29sZS5sb2codXJsLCAndXJsJylcbiAgICAgICAgcmV0dXJuIGF3YWl0IGdldDxTZWFyY2hQaG90bz4odXJsLCB0aGlzLiNnZXRBdXRob3JpemF0aW9uSGVhZGVyKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJhbmRvbSBwaG90b3MgaW4gUGV4ZWxzIEFQSVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwZXJQYWdlIFNwZWNpZmllcyB0aGUgbnVtYmVyIGl0ZW1zIHBlciBwYWdlIChEZWZhdWx0cyB0byAxKVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFNlYXJjaFBob3RvPn1cbiAgICAgKi9cbiAgICBnZXRSYW5kb21QaG90b3MgPSBhc3luYyAocGVyUGFnZTogbnVtYmVyID0gMSk6IFByb21pc2U8U2VhcmNoUGhvdG8+ID0+IHtcbiAgICAgICAgY29uc3QgcmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDEwMDAgLSAxICsgMSkpICsgMTtcbiAgICAgICAgY29uc3QgdXJsID0gYCR7dGhpcy4jZ2V0QmFzZVVybCgpfS8ke0VuZHBvaW50cy5DVVJBVEVEX1VSTH0/cGFnZT0ke3JhbmRvbX0mcGVyX3BhZ2U9JHtwZXJQYWdlfWA7XG4gICAgICAgIHJldHVybiBhd2FpdCBnZXQ8U2VhcmNoUGhvdG8+KHVybCwgdGhpcy4jZ2V0QXV0aG9yaXphdGlvbkhlYWRlcigpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmVuZGluZyBwaG90b3MgZnJvbSBQZXhlbHMgQVBJXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2UgU3BlY2lmaWVzIHRoZSBwYWdlIGJlaW5nIHJlcXVlc3RlZCAoRGVmYXVsdHMgdG8gMSlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGVyUGFnZSBTcGVjaWZpZXMgdGhlIG51bWJlciBpdGVtcyBwZXIgcGFnZSAoRGVmYXVsdHMgdG8gMSlcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTZWFyY2hQaG90bz59XG4gICAgICovXG4gICAgZ2V0VHJlbmRpbmdQaG90b3MgPSBhc3luYyAocGFnZTogbnVtYmVyID0gMSwgcGVyUGFnZTogbnVtYmVyID0gMTUpOiBQcm9taXNlPFNlYXJjaFBob3RvPiA9PiB7XG4gICAgICAgIGNvbnN0IHVybCA9IGAke3RoaXMuI2dldEJhc2VVcmwoKX0vJHtFbmRwb2ludHMuQ1VSQVRFRF9VUkx9P3BhZ2U9JHtwYWdlfSZwZXJfcGFnZT0ke3BlclBhZ2V9YDtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGdldDxTZWFyY2hQaG90bz4odXJsLCB0aGlzLiNnZXRBdXRob3JpemF0aW9uSGVhZGVyKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlYXJjaCB2aWRlb3MgaW4gUGV4ZWxzIEFQSVxuICAgICAqIEBwYXJhbSB7U2VhcmNoUXVlcnlPcHRpb259IFNlYXJjaCB0ZXJtXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2UgU3BlY2lmaWVzIHRoZSBwYWdlIGJlaW5nIHJlcXVlc3RlZCAoRGVmYXVsdHMgdG8gMSlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGVyUGFnZSBTcGVjaWZpZXMgdGhlIG51bWJlciBvZiBpdGVtcyBwZXIgcGFnZSAoRGVmYXVsdHMgdG8gMTApXG4gICAgICogQHJldHVybnMge1Byb21pc2U8U2VhcmNoVmlkZW8+fVxuICAgICAqL1xuICAgIHNlYXJjaFZpZGVvcyA9IGFzeW5jIChxcDogU2VhcmNoUXVlcnlPcHRpb24sIHBhZ2U6IG51bWJlciA9IDEsIHBlclBhZ2U6IG51bWJlciA9IDEwKTogUHJvbWlzZTxTZWFyY2hWaWRlbz4gPT4ge1xuICAgICAgICBpZiAoIXFwLnF1ZXJ5KSB0aHJvdyBuZXcgRXJyb3IoJ1F1ZXJ5IGlzIHJlcXVpcmVkIGZpZWxkLiBUaGUgc2VhcmNoIHF1ZXJ5LiBPY2VhbiwgVGlnZXJzLCBQZWFycywgZXRjLicpXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gT2JqZWN0LmtleXMocXApLlxuICAgICAgICAgICAgbWFwKChrKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHFwW2sgYXMga2V5b2YgU2VhcmNoUXVlcnlPcHRpb25dKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7a309JHtxcFtrIGFzIGtleW9mIFNlYXJjaFF1ZXJ5T3B0aW9uXX1gO1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAgICAgLmpvaW4oJyYnKTtcbiAgICAgICAgY29uc3QgcXMgPSBgJHtxdWVyeS50b0xvd2VyQ2FzZSgpfSYgcGVyX3BhZ2U9JHtwZXJQYWdlfSZwYWdlPSR7cGFnZX1gO1xuICAgICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLiNnZXRCYXNlVXJsKCl9LyR7RW5kcG9pbnRzLlZJREVPX1NFQVJDSF9VUkx9PyR7cXN9YDtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGdldDxTZWFyY2hWaWRlbz4odXJsLCB0aGlzLiNnZXRBdXRob3JpemF0aW9uSGVhZGVyKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBvcHVsYXIgdmlkZW9zIGZyb20gUGV4ZWxzIEFQSVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwYWdlIFNwZWNpZmllcyB0aGUgcGFnZSBiZWluZyByZXF1ZXN0ZWQgKERlZmF1bHRzIHRvIDEpXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBlclBhZ2UgU3BlY2lmaWVzIHRoZSBudW1iZXIgaXRlbXMgcGVyIHBhZ2UgKERlZmF1bHRzIHRvIDEpXG4gICAgICogQHJldHVybnMge1Byb21pc2U8U2VhcmNoVmlkZW8+fVxuICAgICAqL1xuICAgIGdldFBvcHVsYXJWaWRlb3MgPSBhc3luYyAodnA/OiBWaWRlb1BhcmFtZXRlcik6IFByb21pc2U8U2VhcmNoVmlkZW8+ID0+IHtcbiAgICAgICAgbGV0IHVybCA9IGAke3RoaXMuI2dldEJhc2VVcmwoKX0vJHtFbmRwb2ludHMuUE9QVUxBUl9WSURFT19VUkx9YDtcbiAgICAgICAgaWYgKHZwKSB7XG4gICAgICAgICAgICBjb25zdCBxdWVyeSA9IE9iamVjdC5rZXlzKHZwKS5cbiAgICAgICAgICAgICAgICBtYXAoKGspID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZwW2sgYXMga2V5b2YgVmlkZW9QYXJhbWV0ZXJdKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke2t9PSR7dnBbayBhcyBrZXlvZiBWaWRlb1BhcmFtZXRlcl19YDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAgICAgICAuam9pbignJicpO1xuICAgICAgICAgICAgdXJsICs9IGA/JHtxdWVyeX1gO1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGdldDxTZWFyY2hWaWRlbz4odXJsLCB0aGlzLiNnZXRBdXRob3JpemF0aW9uSGVhZGVyKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCBnZXQ8U2VhcmNoVmlkZW8+KHVybCwgdGhpcy4jZ2V0QXV0aG9yaXphdGlvbkhlYWRlcigpKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgbXkgY29sbGVjdGlvbnMgIGFuZCBpdCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGFzIHlvdXIgQ29sbGVjdGlvbiBvbiBQZXhlbHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlkXG4gICAgICogQHJldHVybnMge1Byb21pc2U8Q29sbGVjdGlvbj59XG4gICAgICovXG4gICAgZ2V0TXlDb2xsZWN0aW9uID0gYXN5bmMgKHBhZ2U6IG51bWJlciA9IDEsIHBlclBhZ2U6IG51bWJlciA9IDE1KTogUHJvbWlzZTxDb2xsZWN0aW9uPiA9PiB7XG4gICAgICAgIGNvbnN0IHVybCA9IGAke3RoaXMuI2dldEJhc2VVcmwoKX0vJHtFbmRwb2ludHMuTVlfQ09MTEVDVElPTlN9P3BhZ2U9JHtwYWdlfSZwZXJfcGFnZT0ke3BlclBhZ2V9YDtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGdldDxDb2xsZWN0aW9uPih1cmwsIHRoaXMuI2dldEF1dGhvcml6YXRpb25IZWFkZXIoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBSZXF1ZXN0IGdldCBnZXRDb2xsZWN0aW9uc01lZGlhIGFuZCxpdCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGFzIENvbGxlY3Rpb25zIG9uIFBleGVscy5cbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZFxuICAgICogQHJldHVybnMge1Byb21pc2U8Q29sbGVjdGlvbnM+fVxuICAgICovXG4gICAgZ2V0Q29sbGVjdGlvbnNNZWRpYSA9IGFzeW5jIChpZDogc3RyaW5nLFxuICAgICAgICB0eXBlOiAncGhvdG9zJyB8ICd2aWRlb3MnIHwgJ2FsbCcsXG4gICAgICAgIHBhZ2U6IG51bWJlciA9IDEsIHBlclBhZ2U6IG51bWJlciA9IDE1KTogUHJvbWlzZTxDb2xsZWN0aW9ucz4gPT4ge1xuICAgICAgICBsZXQgdXJsID0gYCR7dGhpcy4jZ2V0QmFzZVVybCgpfS8ke0VuZHBvaW50cy5NWV9DT0xMRUNUSU9OU30vJHtpZH0/dHlwZT0ke3R5cGV9JnBhZ2U9JHtwYWdlfSZwZXJfcGFnZT0ke3BlclBhZ2V9YDtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdhbGwnKSB7XG4gICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgndHlwZT1hbGwmJywgJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCBnZXQ8Q29sbGVjdGlvbnM+KHVybCwgdGhpcy4jZ2V0QXV0aG9yaXphdGlvbkhlYWRlcigpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICogUmVxdWVzdCBmZWF0dXJlZCBjb2xsZWN0aW9ucyBhbmQsIGl0IHJldHVybnMgYSBwcm9taXNlIHRoYXQgYXMgYWxsIGZlYXR1cmUgQ29sbGVjdGlvbnMgb24gUGV4ZWxzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaWRcbiAgICogQHJldHVybnMge1Byb21pc2U8Q29sbGVjdGlvbnM+fVxuICAgKi9cbiAgICBnZXRGZWF0dXJlZENvbGxlY3Rpb25zID0gYXN5bmMgKHBhZ2U6IG51bWJlciA9IDEsIHBlclBhZ2U6IG51bWJlciA9IDE1KTogUHJvbWlzZTxDb2xsZWN0aW9ucz4gPT4ge1xuICAgICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLiNnZXRCYXNlVXJsKCl9LyR7RW5kcG9pbnRzLkZFQVRVUkVEX0NPTExFQ1RJT05TfT9wYWdlPSR7cGFnZX0mcGVyX3BhZ2U9JHtwZXJQYWdlfWA7XG4gICAgICAgIHJldHVybiBhd2FpdCBnZXQ8Q29sbGVjdGlvbnM+KHVybCwgdGhpcy4jZ2V0QXV0aG9yaXphdGlvbkhlYWRlcigpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBleGVsc0FwaTsiXX0=